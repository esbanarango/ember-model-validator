<div class="ui masthead minimum vertical segment">
  <div class="ui container">
    <div class="introduction">
      <h1 class="ui header">Ember Model Validator Usage</h1>
    </div>
  </div>
</div>

<div class="ui main container">
  <h2 class="ui header">One Decorator to <i>Validate Them All</i> üíç</h2>

  <div class="no example">
    <p>
      <strong>Ember-model-validator</strong> provides a decorator to be included in your models for adding validation support. This decorator can be imported from your app's namespace (e.g. ember-model-validator/decorators/object-validator in your models).
    </p>

    <p>
      By including Ember-model-validator's decorator into your model, you will get a <code class="ui label">validate</code> function available. it is a synchronous function which returns either <i>true</i> or <i>false</i>.
    </p>
    {{! template-lint-disable block-indentation }}
    <CodeBlock @language="javascript">
if (myModel.validate()) {
  // ...
} else {
  console.log(myModel.get("errors"));
}
    </CodeBlock>

    <p>You will also have a <code class="ui label">clearErrors</code> function available. Which will clear the errors of your model.</p>

    <h2 class="ui header">Customising</h2>

    <h4>Validate Options</h4>
    <ul>
      <li><code class="ui label">only</code> Specify the attributes you want to validate.</li>
      <li><code class="ui label">except</code> Prevent certain attribute to be validated.</li>
      <li><code class="ui label">addErrors</code> (Default <strong>true</strong>). Only return <i>true</i> or <i>false</i> but do not add any errors to the model.</li>
    </ul>

    <p>
      You can pass an option hash for excluding or forcing certain attributes to be validated, and to prevent errors to be added.
    </p>
    <CodeBlock @language="javascript">
// Using `except`
myModel.validate({ except: ["name", "cellphone"] });

// Using `only`
myModel.validate({ only: ["favoriteColor", "mainstreamCode"] });

// Using `addErrors`
myModel.validate({ addErrors: false });
// This will validate the model but won't add any errors.
    </CodeBlock>

    <p>
      To target specific validations when using <code class="ui label">except / only</code>, pass the validations' names along the attribute's name:
    </p>
    <CodeBlock @language="javascript">
// This runs all validations, except name's presence and length validations and
// any email validations.
// Other name validations are still run.
myModel.validate({ except: ['name:presence,length', 'email'] });
    </CodeBlock>
  </div>

  <h3 class="ui header">Conditional Validators</h3>
  <p>
    You can pass an<code class="ui label">if</code> option to any validator. This will make the validation to <strong>only</strong> run when the function passed returns true. <code class="ui label">function(key,value, _this){...}</code>
  </p>
  {{! template-lint-disable block-indentation }}
  <CodeBlock @language="javascript">
import Model from 'ember-data/model';
import attr from 'ember-data/attr';
import Validator from 'ember-model-validator/decorators/model-validator';

@Validator
class MyModel extends Model {
  @attr("") images;
  @attr("string") type;

  validations = {
    images: {
      presence: {
        if: function(key, value, _this) {
          return "gallery" === _this.get("type");
        }
      }
    }
  };
}

export default MyModel;
  </CodeBlock>
  <h3 class="ui header">Using function to generate custom message</h3>

  <p>You can pass a function to generate a more specific error message. Some scenarios are:</p>

  <ul>
    <li>When the message varies depending of the attribute value..</li>
    <li>When you want to use model attributes in the message.</li>
  </ul>

  <p>The message function receives the attribute name, the value of the attribute and the model itself.</p>

  <p><strong>Note:</strong> If the function doesn't return a string the default message is going to be used.</p>
  <CodeBlock @language="javascript">
import Model from 'ember-data/model';
import attr from 'ember-data/attr';
import Validator from 'ember-model-validator/decorators/model-validator';

@Validator
class MyModel extends Model {
  @attr("number", { defaultValue: 12345 }) otherCustomAttribute;

  validations = {
    otherCustomAttribute: {
      custom: {
        validation: function(key, value) {
          return value.toString().length === 5 ? true : false;
        },
        message: function(key, value, _this) {
          return key + " must have exactly 5 digits";
        }
      }
    }
  };
}

export default MyModel;
  </CodeBlock>

  <div class="ui hidden divider"></div>

  <h2 class="ui dividing header">An Usage Example</h2>

  <div class="no example">
    <CodeBlock @language="javascript">
import Model from 'ember-data/model';
import attr from 'ember-data/attr';
import Validator from 'ember-model-validator/decorators/model-validator';

@Validator
class MyModel extends Model {
  @attr("string") name;
  @attr("string") login;
  @attr("string") secondName;
  @attr("string") email;
  @attr("string") password;
  @attr("string") passwordConfirmation;

  validations = {
    name: {
      presence: { errorAs: "profile.name" },
      inclusion: { in: ["Jose Rene", "Aristi Gol", "Armani"], message: "Solo verde a morir" }
    },
    login: {
      absence: true
    },
    secondName: {
      exclusion: { in: ["Gionvany Hernandez", "Wilder Medina"], message: "Que iNrresponsabilidad" }
    },
    email: {
      presence: true,
      email: true
    },
    password: {
      custom: function(key, value, _this) {
        return String(value) === String(_this.get("socialSecurity")) ? false : true;
      },
      match: "passwordConfirmation",
      mustContainCapital: true,
      mustContainLower: true,
      mustContainNumber: true,
      mustContainSpecial: true
    }
  };
}

export default MyModel;
    </CodeBlock>
    <p>After setting the validations on your model you will be able to:</p>
    <CodeBlock @language="javascript">
import Controller from '@ember/controller';
import { action } from '@ember/object';

export default class MyController extends Controller {
  @action
  saveFakeModel() {
    let fakeModel = this.model;

    if (fakeModel.validate()) {
      fakeModel.save().then(
        // Success
        function() {
          // Alert success
          console.log('ooooh yeah we just saved the FakeModel...');
        },
        // Error handling
        function(error) {
          // Alert failure
          console.log('There was a problem saving the FakeModel...');
          console.log(error);
        }
      );
    } else {
      fakeModel.get('errors');
    }
  }
}
    </CodeBlock>
    {{! template-lint-enable }}
  </div>
</div>
